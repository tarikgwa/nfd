# -*- coding: utf-8 -*-
from __future__ import unicode_literals

from django.db import models, migrations
import django.utils.timezone
from django.conf import settings
import mod_sms.models


class Migration(migrations.Migration):

    dependencies = [
        ('sms', '0001_initial'),
        ('dialer_contact', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='SMSCampaign',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('campaign_code', models.CharField(default=mod_sms.models.set_campaign_code, max_length=20, blank=True, help_text='this code is auto-generated by the platform,                                      this is used to identify the campaign', unique=True, verbose_name='SMS campaign code')),
                ('name', models.CharField(max_length=100, verbose_name='name')),
                ('description', models.TextField(help_text='campaign description', null=True, verbose_name='description', blank=True)),
                ('status', models.IntegerField(default=2, verbose_name='status', choices=[(3, 'ABORT'), (4, 'END'), (2, 'PAUSE'), (1, 'START')])),
                ('callerid', models.CharField(help_text='outbound Caller ID', max_length=80, verbose_name='Caller ID Number', blank=True)),
                ('startingdate', models.DateTimeField(default=django.utils.timezone.now, verbose_name='start')),
                ('expirationdate', models.DateTimeField(default=mod_sms.models.set_expirationdate, verbose_name='finish')),
                ('daily_start_time', models.TimeField(default=b'00:00:00')),
                ('daily_stop_time', models.TimeField(default=b'23:59:59')),
                ('monday', models.BooleanField(default=True, verbose_name='monday')),
                ('tuesday', models.BooleanField(default=True, verbose_name='tuesday')),
                ('wednesday', models.BooleanField(default=True, verbose_name='wednesday')),
                ('thursday', models.BooleanField(default=True, verbose_name='thursday')),
                ('friday', models.BooleanField(default=True, verbose_name='friday')),
                ('saturday', models.BooleanField(default=True, verbose_name='saturday')),
                ('sunday', models.BooleanField(default=True, verbose_name='sunday')),
                ('frequency', models.IntegerField(default=b'10', help_text='SMS per minute', null=True, verbose_name='frequency', blank=True)),
                ('maxretry', models.IntegerField(default=b'0', help_text='maximum retries per contact', null=True, verbose_name='max retries', blank=True)),
                ('intervalretry', models.IntegerField(default=b'300', help_text='time delay in seconds before retrying contact', null=True, verbose_name='time between Retries', blank=True)),
                ('text_message', models.TextField(verbose_name='text Message')),
                ('extra_data', models.CharField(help_text='additional application parameters.', max_length=120, verbose_name='extra parameters', blank=True)),
                ('created_date', models.DateTimeField(auto_now_add=True, verbose_name=b'Date')),
                ('updated_date', models.DateTimeField(auto_now=True)),
                ('imported_phonebook', models.CharField(default=b'', max_length=500, verbose_name='list of imported phonebook')),
                ('totalcontact', models.IntegerField(default=0, help_text='total contact for this campaign', null=True, verbose_name='total contact', blank=True)),
                ('phonebook', models.ManyToManyField(to='dialer_contact.Phonebook', null=True, blank=True)),
                ('sms_gateway', models.ForeignKey(related_name='SMS Gateway', verbose_name='sms gateway', to='sms.Gateway', help_text='select SMS gateway')),
                ('user', models.ForeignKey(related_name='SMSCampaign owner', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'sms_campaign',
                'verbose_name': 'SMS campaign',
                'verbose_name_plural': 'SMS campaigns',
                'permissions': (('view_smscampaign', 'can see SMS campaign'), ('view_sms_dashboard', 'can see SMS campaign dashboard')),
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='SMSCampaignSubscriber',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('last_attempt', models.DateTimeField(null=True, verbose_name='last attempt', blank=True)),
                ('count_attempt', models.IntegerField(default=b'0', null=True, verbose_name='count attempts', blank=True)),
                ('duplicate_contact', models.CharField(max_length=90, verbose_name='contact')),
                ('status', models.IntegerField(default=1, choices=[(3, 'ABORT'), (5, 'COMPLETE'), (4, 'FAIL'), (6, 'IN process'), (7, 'NOT authorized'), (2, 'PAUSE'), (1, 'PENDING')], blank=True, null=True, verbose_name='status', db_index=True)),
                ('created_date', models.DateTimeField(auto_now_add=True, verbose_name=b'Date')),
                ('updated_date', models.DateTimeField(auto_now=True)),
                ('contact', models.ForeignKey(blank=True, to='dialer_contact.Contact', help_text='select contact', null=True)),
            ],
            options={
                'db_table': 'sms_campaign_subscriber',
                'verbose_name': 'SMS campaign subscriber',
                'verbose_name_plural': 'SMS campaign subscribers',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='SMSMessage',
            fields=[
                ('message', models.OneToOneField(primary_key=True, serialize=False, to='sms.Message')),
                ('sms_campaign', models.ForeignKey(blank=True, to='mod_sms.SMSCampaign', help_text='select SMS campaign', null=True)),
                ('sms_gateway', models.ForeignKey(related_name='smsmessage_smsgateway', blank=True, to='sms.Gateway', help_text='select SMS gateway', null=True, verbose_name='sms gateway')),
            ],
            options={
                'db_table': 'smsmessage',
                'verbose_name': 'SMS message',
                'verbose_name_plural': 'SMS messages',
                'permissions': (('view_sms_report', 'can see SMS report'),),
            },
            bases=('sms.message',),
        ),
        migrations.CreateModel(
            name='SMSTemplate',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('label', models.CharField(help_text='SMS template name', max_length=75)),
                ('template_key', models.CharField(help_text='Unique name used to pick some template for recurring action, such as activation or warning', unique=True, max_length=30)),
                ('sender_phonenumber', models.CharField(max_length=75)),
                ('sms_text', models.TextField(max_length=500)),
                ('created_date', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'sms_template',
                'verbose_name': 'SMS template',
                'verbose_name_plural': 'SMS templates',
            },
            bases=(models.Model,),
        ),
        migrations.AddField(
            model_name='smscampaignsubscriber',
            name='message',
            field=models.ForeignKey(blank=True, to='sms.Message', help_text='select message', null=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='smscampaignsubscriber',
            name='sms_campaign',
            field=models.ForeignKey(blank=True, to='mod_sms.SMSCampaign', help_text='select SMS campaign', null=True),
            preserve_default=True,
        ),
        migrations.AlterUniqueTogether(
            name='smscampaignsubscriber',
            unique_together=set([('contact', 'sms_campaign')]),
        ),
    ]
